// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	xmonitor "github.com/scrapnode/scrapcore/xmonitor"
	mock "github.com/stretchr/testify/mock"
)

// Monitor is an autogenerated mock type for the Monitor type
type Monitor struct {
	mock.Mock
}

// Connect provides a mock function with given fields: ctx
func (_m *Monitor) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: ctx, ns, name, incr
func (_m *Monitor) Count(ctx context.Context, ns string, name string, incr int64) {
	_m.Called(ctx, ns, name, incr)
}

// Disconnect provides a mock function with given fields: ctx
func (_m *Monitor) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Propergator provides a mock function with given fields:
func (_m *Monitor) Propergator() xmonitor.Propergator {
	ret := _m.Called()

	var r0 xmonitor.Propergator
	if rf, ok := ret.Get(0).(func() xmonitor.Propergator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(xmonitor.Propergator)
		}
	}

	return r0
}

// Record provides a mock function with given fields: ctx, ns, name, incr
func (_m *Monitor) Record(ctx context.Context, ns string, name string, incr int64) {
	_m.Called(ctx, ns, name, incr)
}

// Trace provides a mock function with given fields: ctx, ns, name
func (_m *Monitor) Trace(ctx context.Context, ns string, name string) (context.Context, xmonitor.Span) {
	ret := _m.Called(ctx, ns, name)

	var r0 context.Context
	var r1 xmonitor.Span
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (context.Context, xmonitor.Span)); ok {
		return rf(ctx, ns, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) context.Context); ok {
		r0 = rf(ctx, ns, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) xmonitor.Span); ok {
		r1 = rf(ctx, ns, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(xmonitor.Span)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewMonitor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMonitor creates a new instance of Monitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMonitor(t mockConstructorTestingTNewMonitor) *Monitor {
	mock := &Monitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
