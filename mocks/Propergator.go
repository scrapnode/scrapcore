// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Propergator is an autogenerated mock type for the Propergator type
type Propergator struct {
	mock.Mock
}

// Extract provides a mock function with given fields: ctx
func (_m *Propergator) Extract(ctx context.Context) map[string]string {
	ret := _m.Called(ctx)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Inject provides a mock function with given fields: ctx, carrier
func (_m *Propergator) Inject(ctx context.Context, carrier map[string]string) context.Context {
	ret := _m.Called(ctx, carrier)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) context.Context); ok {
		r0 = rf(ctx, carrier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

type mockConstructorTestingTNewPropergator interface {
	mock.TestingT
	Cleanup(func())
}

// NewPropergator creates a new instance of Propergator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPropergator(t mockConstructorTestingTNewPropergator) *Propergator {
	mock := &Propergator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
