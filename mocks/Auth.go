// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/scrapnode/scrapcore/auth"

	mock "github.com/stretchr/testify/mock"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// Connect provides a mock function with given fields: ctx
func (_m *Auth) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields: ctx
func (_m *Auth) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, tokens
func (_m *Auth) Refresh(ctx context.Context, tokens *auth.TokenPair) (*auth.TokenPair, error) {
	ret := _m.Called(ctx, tokens)

	var r0 *auth.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.TokenPair) (*auth.TokenPair, error)); ok {
		return rf(ctx, tokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.TokenPair) *auth.TokenPair); ok {
		r0 = rf(ctx, tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.TokenPair) error); ok {
		r1 = rf(ctx, tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sign provides a mock function with given fields: ctx, creds
func (_m *Auth) Sign(ctx context.Context, creds *auth.SignCreds) (*auth.TokenPair, error) {
	ret := _m.Called(ctx, creds)

	var r0 *auth.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.SignCreds) (*auth.TokenPair, error)); ok {
		return rf(ctx, creds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.SignCreds) *auth.TokenPair); ok {
		r0 = rf(ctx, creds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.SignCreds) error); ok {
		r1 = rf(ctx, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: ctx, token
func (_m *Auth) Verify(ctx context.Context, token string) (*auth.Account, error) {
	ret := _m.Called(ctx, token)

	var r0 *auth.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*auth.Account, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Account); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuth interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuth(t mockConstructorTestingTNewAuth) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
